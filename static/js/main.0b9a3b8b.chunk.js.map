{"version":3,"sources":["ListForm.js","ListTodo.js","ListItems.js","index.js"],"names":["ListForm","props","useState","edit","valueText","input","setInput","handleChange","e","target","value","className","onSubmit","preventDefault","id","Math","floor","random","text","TextField","label","variant","type","name","autoComplete","required","onChange","Button","ListTodo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","size","valueTime","time","ListItems","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b9a3b8b.chunk.js","sourcesContent":["import './App.scss';\nimport React, {useState} from 'react';\nimport { TextField } from '@mui/material';\nimport Button from '@material-ui/core/Button';\n\nfunction ListForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.valueText : '');\n\n  const handleChange = e => {\n    setInput(e.target.value)\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n\n    setInput('')\n  };\n\n  return (\n    <form className='todo-form' onSubmit={handleSubmit}>\n    {props.edit ? (\n      <>\n        <TextField  id=\"filled-basic\" \n          label=\"Edit what you want to do\"   \n          variant=\"filled\"\n          className=\"textfield\"\n          type=\"text\" \n          name=\"text\"\n          value={input}\n          autoComplete=\"off\" required\n          onChange={handleChange}\n        />\n        <Button variant=\"contained\" type=\"submit\">UPDATE IT!</Button>\n      </>\n    ) : (\n      <>\n        <TextField  id=\"filled-basic\" \n          label=\"What to do now?\"   \n          variant=\"filled\"\n          className=\"textfield\"\n          type=\"text\" \n          name=\"text\"\n          value={input}\n          autoComplete=\"off\" required\n          onChange={handleChange}\n        />\n        <Button variant=\"contained\" type=\"submit\">ADD IT!</Button>\n      </>   \n    )}\n    </form>\n  );\n}\n\nexport default ListForm;\n","import React, { useState } from 'react';\r\nimport ListForm from './ListForm';\r\nimport './App.scss';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst ListTodo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <ListForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div className=\"todo-text\" key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        <p>{todo.text}</p>\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n          size=\"32px\"\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, valueText: todo.text, valueTime: todo.time })}\r\n          className='edit-icon'\r\n          size=\"32px\"\r\n        />\r\n        </div>\r\n      </div>\r\n  ));\r\n};\r\n\r\nexport default ListTodo","import React, {useState} from \"react\";\r\nimport ListForm from \"./ListForm\";\r\nimport ListTodo from \"./ListTodo\";\r\n\r\nfunction ListItems() {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos)\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if(!newValue.text  || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => item.id === todoId ? newValue : item))\r\n    };\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n   \r\n        setTodos(removeArr)\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo;\r\n        });\r\n        setTodos(updatedTodos);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <div className=\"main-cover\">\r\n        <p className=\"intro-text\">TO DO LIST</p>\r\n        <ListForm onSubmit={addTodo}/>\r\n        <ListTodo \r\n        todos={todos} \r\n        completeTodo={completeTodo} \r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}/>\r\n        </div>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default ListItems    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ListItems from './ListItems';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ListItems />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}